generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  binaryTargets   = ["native"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public", "storage"]
}

// Public Schemas 
model dummy {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String?

  @@schema("public")
}

model user {
  id                       String          @id @default(uuid())
  email                    String          @unique
  name                     String
  date_of_birth            DateTime
  bio                      String?         @default("")
  profile_image            String?         @default("avatar.jpg")
  cover_image              String?         @default("avatar.jpg")
  created_at               DateTime        @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?       @updatedAt
  authored_posts           posts[]         @relation("author_post")
  likes                    like[]          @relation("liker_like")
  sent_friend_requests     friendRequest[] @relation("sent_requests")
  received_friend_requests friendRequest[] @relation("received_requests")
  sent_friends             friendship[]    @relation("user_friends")
  received_friends         friendship[]    @relation("friends_user")
  pages                    pages[]
  comments                 comments[]
  shares                   shares[]
  page_follows             pages[]         @relation("user_follow_pages")
  groups_in                group[]         @relation("user_in_group")
  story                    story[]         @relation("user_story")

  @@schema("public")
}

model posts {
  id         String     @id @default(uuid())
  content    String?
  images     String?
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @updatedAt
  author_id  String
  group_id   String?
  page_id    String?
  author     user       @relation("author_post", fields: [author_id], references: [id])
  group      group?     @relation("group_post", fields: [group_id], references: [id])
  page       pages?     @relation("page_post", fields: [page_id], references: [id])
  likes      like[]     @relation("like_post")
  comments   comments[]
  shares     shares[]

  @@schema("public")
}

model comments {
  id         String     @id @default(uuid())
  content    String?
  images     String?
  created_at DateTime   @default(now()) @db.Timestamptz(6)
  updated_at DateTime?  @updatedAt
  post_id    String
  author_id  String
  author     user       @relation(fields: [author_id], references: [id])
  likes      like[]     @relation("like_comment")
  post       posts      @relation(fields: [post_id], references: [id])
  parent_id  String? // Self-relation for nested comments
  parent     comments?  @relation("CommentToComment", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  replies    comments[] @relation("CommentToComment")

  @@schema("public")
}

model like {
  id         String     @id @default(uuid())
  liker_id   String
  post_id    String?
  comment_id String?
  story_id   String?
  like_role  like_type? @default(like)
  liker      user       @relation("liker_like", fields: [liker_id], references: [id])
  post       posts?     @relation("like_post", fields: [post_id], references: [id])
  comment    comments?  @relation("like_comment", fields: [comment_id], references: [id])
  story      story?     @relation("like_story", fields: [story_id], references: [id])

  @@unique([liker_id, post_id])
  @@schema("public")
}

model shares {
  id         String   @id @default(uuid())
  post_id    String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  author_id  String
  author     user     @relation(fields: [author_id], references: [id])
  post       posts    @relation(fields: [post_id], references: [id])

  @@schema("public")
}

model story {
  id         String   @id @default(uuid())
  content    String?
  images     String?
  created_at DateTime @default(now()) @db.Timestamptz(6)
  author_id  String
  group_id   String?
  page_id    String?
  author     user     @relation("user_story", fields: [author_id], references: [id])
  likes      like[]   @relation("like_story")

  @@schema("public")
}

model group {
  id          String  @id @default(uuid())
  name        String
  description String?
  members     user[]  @relation("user_in_group")
  posts       posts[] @relation("group_post")

  @@schema("public")
}

model pages {
  id        String  @id @default(uuid())
  user_id   String
  user      user    @relation(fields: [user_id], references: [id])
  followers user[]  @relation("user_follow_pages")
  posts     posts[] @relation("page_post")

  @@schema("public")
}

model friendship {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  user_id    String
  user       user     @relation("user_friends", fields: [user_id], references: [id])
  friend_id  String
  friend     user     @relation("friends_user", fields: [friend_id], references: [id])

  @@unique([user_id, friend_id])
  @@schema("public")
}

model friendRequest {
  id          String         @id @default(uuid())
  sender      user           @relation("sent_requests", fields: [sender_id], references: [id])
  sender_id   String
  receiver    user           @relation("received_requests", fields: [receiver_id], references: [id])
  receiver_id String
  status      requestStatus? @default(PENDING)
  created_at  DateTime       @default(now()) @db.Timestamptz(6)
  updated_at  DateTime?      @updatedAt

  @@unique([sender_id, receiver_id])
  @@schema("public")
}

enum like_type {
  like
  love
  care
  haha
  wow
  sad
  angry

  @@schema("public")
}

enum requestStatus {
  ACCEPTED
  PENDING
  REJECTED
  BLOCKED

  @@schema("public")
}
